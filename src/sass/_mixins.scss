@use "sass:color";
@use "sass:list";
@use "sass:selector";
@use "sass:map";
@use "./variables" as *;

$theme-map: null;

@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin reset-button {
  padding: 0;
  border: none;
  font-family: inherit;
  color: unset;
  background-color: transparent;
  user-select: none;
  cursor: pointer;

  &:disabled {
    pointer-events: none;
  }
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-content {
  line-height: 1.6;
}

@mixin color-mode($mode) {
  @at-root #{selector.nest(":root[data-color-mode=#{$mode}]", &)} {
    $theme-map: map.get($themes, $mode) !global;
    @content;
    $theme-map: null !global;
  }
}

@mixin themify {
  @include light-mode {
    @content;
  }

  @include dark-mode {
    @content;
  }
}

@mixin light-mode {
  @include color-mode("light") {
    @content;
  }
}

@mixin dark-mode {
  @include color-mode("dark") {
    @content;
  }
}

// The function uses `theme-map` defined by the `color-mode` mixin. If the
// function is called outside of the `color-mode` mixin, then the light theme is
// used by default.
@function themed($key) {
  @return map.get($theme-map or map.get($themes, "light"), $key);
}

@function transition-value(
  $property,
  $duration: 0.1s,
  $function: ease-out,
  $delay: 0s
) {
  @return $property $duration $function $delay;
}

@mixin transition($values...) {
  $processed-values: list.append((), $transitions);

  @each $value in $values {
    $processed-values: list.append(
      $processed-values,
      transition-value($value...),
      $separator: comma
    );
  }

  transition: $processed-values;
}

@mixin text-input {
  height: 36px;
  border: 1px solid themed("gray-500");
  border-radius: 6px;
  padding: 0 10px;
  background-color: themed("gray-100");
  appearance: none;

  @include dark-mode {
    border-color: themed("gray-600");
    background-color: themed("gray-800");
  }

  @media (max-width: $screen-sm) {
    font-size: 16px;
  }

  &:focus {
    background-color: white;

    @include dark-mode {
      background-color: themed("gray-900");
    }
  }

  &::placeholder {
    color: color.adjust(themed("text-primary"), $lightness: 50%);
    opacity: 1;

    @include dark-mode {
      color: color.adjust(themed("text-primary"), $lightness: -35%);
    }
  }
}
